//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FpvDroneSimulator.Services.InputProvider
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""LevelScheme"",
            ""id"": ""dac30a7d-b63c-43bb-8fbe-9eefbe62b3dc"",
            ""actions"": [
                {
                    ""name"": ""PitchRollValue"",
                    ""type"": ""Value"",
                    ""id"": ""7088face-5b1a-4a5b-a55c-82d33cffa581"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LiftYawValue"",
                    ""type"": ""Value"",
                    ""id"": ""150577e4-6fe3-42eb-99c5-66dcddc2ab30"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnResetPressed"",
                    ""type"": ""Button"",
                    ""id"": ""6bf889f3-a686-4e99-b5c8-808d02744e4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnFlightModeChanged"",
                    ""type"": ""Button"",
                    ""id"": ""f3e47481-844b-4aea-b575-a72d234d84ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9f13d88-a036-4ed2-96ee-1274a56422f4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRollValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1668b06-81fd-495e-b626-cece6795295a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftYawValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c82d17-9235-4874-a509-68b42e15eb75"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnResetPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2479e153-eeb4-400a-aa11-ccb48866e484"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnResetPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4277ec1-924e-44bb-ab16-f64f60d08fb7"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnFlightModeChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a973af90-c734-493a-abb9-fb306e441719"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnFlightModeChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuScheme"",
            ""id"": ""d0d29187-cf1a-44bb-9b28-3e30b540a14e"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""General"",
            ""id"": ""05d809fc-784e-4231-afa2-db932b6c9556"",
            ""actions"": [
                {
                    ""name"": ""OnBackPressed"",
                    ""type"": ""Button"",
                    ""id"": ""ea135a08-9909-4c52-b170-4f992b70c328"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d06cb66-48af-4dfe-aee7-bc8abe55d95d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnBackPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ef9dd2c-ed7e-4619-b587-416dbfc263af"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnBackPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // LevelScheme
            m_LevelScheme = asset.FindActionMap("LevelScheme", throwIfNotFound: true);
            m_LevelScheme_PitchRollValue = m_LevelScheme.FindAction("PitchRollValue", throwIfNotFound: true);
            m_LevelScheme_LiftYawValue = m_LevelScheme.FindAction("LiftYawValue", throwIfNotFound: true);
            m_LevelScheme_OnResetPressed = m_LevelScheme.FindAction("OnResetPressed", throwIfNotFound: true);
            m_LevelScheme_OnFlightModeChanged = m_LevelScheme.FindAction("OnFlightModeChanged", throwIfNotFound: true);
            // MenuScheme
            m_MenuScheme = asset.FindActionMap("MenuScheme", throwIfNotFound: true);
            // General
            m_General = asset.FindActionMap("General", throwIfNotFound: true);
            m_General_OnBackPressed = m_General.FindAction("OnBackPressed", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // LevelScheme
        private readonly InputActionMap m_LevelScheme;
        private List<ILevelSchemeActions> m_LevelSchemeActionsCallbackInterfaces = new List<ILevelSchemeActions>();
        private readonly InputAction m_LevelScheme_PitchRollValue;
        private readonly InputAction m_LevelScheme_LiftYawValue;
        private readonly InputAction m_LevelScheme_OnResetPressed;
        private readonly InputAction m_LevelScheme_OnFlightModeChanged;
        public struct LevelSchemeActions
        {
            private @Controls m_Wrapper;
            public LevelSchemeActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PitchRollValue => m_Wrapper.m_LevelScheme_PitchRollValue;
            public InputAction @LiftYawValue => m_Wrapper.m_LevelScheme_LiftYawValue;
            public InputAction @OnResetPressed => m_Wrapper.m_LevelScheme_OnResetPressed;
            public InputAction @OnFlightModeChanged => m_Wrapper.m_LevelScheme_OnFlightModeChanged;
            public InputActionMap Get() { return m_Wrapper.m_LevelScheme; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LevelSchemeActions set) { return set.Get(); }
            public void AddCallbacks(ILevelSchemeActions instance)
            {
                if (instance == null || m_Wrapper.m_LevelSchemeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LevelSchemeActionsCallbackInterfaces.Add(instance);
                @PitchRollValue.started += instance.OnPitchRollValue;
                @PitchRollValue.performed += instance.OnPitchRollValue;
                @PitchRollValue.canceled += instance.OnPitchRollValue;
                @LiftYawValue.started += instance.OnLiftYawValue;
                @LiftYawValue.performed += instance.OnLiftYawValue;
                @LiftYawValue.canceled += instance.OnLiftYawValue;
                @OnResetPressed.started += instance.OnOnResetPressed;
                @OnResetPressed.performed += instance.OnOnResetPressed;
                @OnResetPressed.canceled += instance.OnOnResetPressed;
                @OnFlightModeChanged.started += instance.OnOnFlightModeChanged;
                @OnFlightModeChanged.performed += instance.OnOnFlightModeChanged;
                @OnFlightModeChanged.canceled += instance.OnOnFlightModeChanged;
            }

            private void UnregisterCallbacks(ILevelSchemeActions instance)
            {
                @PitchRollValue.started -= instance.OnPitchRollValue;
                @PitchRollValue.performed -= instance.OnPitchRollValue;
                @PitchRollValue.canceled -= instance.OnPitchRollValue;
                @LiftYawValue.started -= instance.OnLiftYawValue;
                @LiftYawValue.performed -= instance.OnLiftYawValue;
                @LiftYawValue.canceled -= instance.OnLiftYawValue;
                @OnResetPressed.started -= instance.OnOnResetPressed;
                @OnResetPressed.performed -= instance.OnOnResetPressed;
                @OnResetPressed.canceled -= instance.OnOnResetPressed;
                @OnFlightModeChanged.started -= instance.OnOnFlightModeChanged;
                @OnFlightModeChanged.performed -= instance.OnOnFlightModeChanged;
                @OnFlightModeChanged.canceled -= instance.OnOnFlightModeChanged;
            }

            public void RemoveCallbacks(ILevelSchemeActions instance)
            {
                if (m_Wrapper.m_LevelSchemeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILevelSchemeActions instance)
            {
                foreach (var item in m_Wrapper.m_LevelSchemeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LevelSchemeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LevelSchemeActions @LevelScheme => new LevelSchemeActions(this);

        // MenuScheme
        private readonly InputActionMap m_MenuScheme;
        private List<IMenuSchemeActions> m_MenuSchemeActionsCallbackInterfaces = new List<IMenuSchemeActions>();
        public struct MenuSchemeActions
        {
            private @Controls m_Wrapper;
            public MenuSchemeActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_MenuScheme; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuSchemeActions set) { return set.Get(); }
            public void AddCallbacks(IMenuSchemeActions instance)
            {
                if (instance == null || m_Wrapper.m_MenuSchemeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MenuSchemeActionsCallbackInterfaces.Add(instance);
            }

            private void UnregisterCallbacks(IMenuSchemeActions instance)
            {
            }

            public void RemoveCallbacks(IMenuSchemeActions instance)
            {
                if (m_Wrapper.m_MenuSchemeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMenuSchemeActions instance)
            {
                foreach (var item in m_Wrapper.m_MenuSchemeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MenuSchemeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MenuSchemeActions @MenuScheme => new MenuSchemeActions(this);

        // General
        private readonly InputActionMap m_General;
        private List<IGeneralActions> m_GeneralActionsCallbackInterfaces = new List<IGeneralActions>();
        private readonly InputAction m_General_OnBackPressed;
        public struct GeneralActions
        {
            private @Controls m_Wrapper;
            public GeneralActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @OnBackPressed => m_Wrapper.m_General_OnBackPressed;
            public InputActionMap Get() { return m_Wrapper.m_General; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
            public void AddCallbacks(IGeneralActions instance)
            {
                if (instance == null || m_Wrapper.m_GeneralActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GeneralActionsCallbackInterfaces.Add(instance);
                @OnBackPressed.started += instance.OnOnBackPressed;
                @OnBackPressed.performed += instance.OnOnBackPressed;
                @OnBackPressed.canceled += instance.OnOnBackPressed;
            }

            private void UnregisterCallbacks(IGeneralActions instance)
            {
                @OnBackPressed.started -= instance.OnOnBackPressed;
                @OnBackPressed.performed -= instance.OnOnBackPressed;
                @OnBackPressed.canceled -= instance.OnOnBackPressed;
            }

            public void RemoveCallbacks(IGeneralActions instance)
            {
                if (m_Wrapper.m_GeneralActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGeneralActions instance)
            {
                foreach (var item in m_Wrapper.m_GeneralActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GeneralActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GeneralActions @General => new GeneralActions(this);
        public interface ILevelSchemeActions
        {
            void OnPitchRollValue(InputAction.CallbackContext context);
            void OnLiftYawValue(InputAction.CallbackContext context);
            void OnOnResetPressed(InputAction.CallbackContext context);
            void OnOnFlightModeChanged(InputAction.CallbackContext context);
        }
        public interface IMenuSchemeActions
        {
        }
        public interface IGeneralActions
        {
            void OnOnBackPressed(InputAction.CallbackContext context);
        }
    }
}
